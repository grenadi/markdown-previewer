{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","require","App","props","state","markdown","this","setState","inputStyle","width","height","marginLeft","marginRight","padding","className","Badge","variant","style","value","onChange","e","updateMarkdown","target","console","log","backgroundColor","dangerouslySetInnerHTML","__html","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAEIA,EAASC,EAAQ,IAEAC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAHK,E,kDAOnB,SAAeA,GACbC,KAAKC,SAAS,CAAEF,e,oBAGlB,WAAU,IAAD,OACHG,EAAa,CACfC,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAS,QAYX,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,+BACG,IACD,cAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,QAA7C,uCAMN,sBAAKF,UAAU,WAAf,UACE,sBAAKA,UAAU,WAAf,UACG,IACD,qBAAKA,UAAU,kBAAf,SACE,6BACE,cAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,YAA7C,+BAKJ,qBAAKF,UAAU,aAAaG,MAAOT,EAAnC,SACE,2BACEM,UAAU,QACVG,MAAOT,EACPU,MAAOZ,KAAKF,MAAMC,SAClBc,SAAU,SAACC,GACT,EAAKC,eAAeD,EAAEE,OAAOJ,QALjC,UAOG,IACAK,QAAQC,IAAIlB,KAAKF,MAAMC,kBAI9B,sBAAKS,UAAU,WAAf,UACG,IACD,qBAAKA,UAAU,kBAAf,SACE,6BACE,cAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,YAA7C,yBAKJ,qBACEC,MAvDM,CAChBR,MAAO,QACPC,OAAQ,OACRe,gBAAiB,UACjBd,WAAY,OACZC,YAAa,OACbC,QAAS,QAkDCa,wBAAyB,CACvBC,OAAQ3B,EAAOM,KAAKF,MAAMC,4B,GA9EXuB,IAAMC,WCQxBC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1a849a01.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nlet marked = require(\"marked\");\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: \"\",\n    };\n  }\n\n  updateMarkdown(markdown) {\n    this.setState({ markdown });\n  }\n\n  render() {\n    var inputStyle = {\n      width: \"400px\",\n      height: \"50vh\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\"\n    };\n\n    var outputStyle = {\n      width: \"400px\",\n      height: \"50vh\",\n      backgroundColor: \"#DCDCDC\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\"\n    };\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n            <div className=\"col text-center\">\n              <h1>\n                {\" \"}\n                <Badge className=\"text-align-center\" variant=\"light\">\n                  Markdown Previewer\n                </Badge>\n              </h1>\n            </div>\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col-md-6\">\n              {\" \"}\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\n                    Markdown Iput\n                  </Badge>\n                </h4>\n              </div>\n              <div className=\"mark-input\" style={inputStyle}>\n                <textarea\n                  className=\"input\"\n                  style={inputStyle}\n                  value={this.state.markdown}\n                  onChange={(e) => {\n                    this.updateMarkdown(e.target.value);\n                  }}>\n                  {\" \"}\n                  {console.log(this.state.markdown)}\n                </textarea>\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              {\" \"}\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\n                    Preview\n                  </Badge>\n                </h4>\n              </div>\n              <div\n                style={outputStyle}\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown),\n                }}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}